# Multi-stage build for better caching and smaller final image
FROM node:18-alpine AS base

# Install minimal system dependencies (avoid unnecessary native build tools)
RUN apk add --no-cache \
    libc6-compat \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package.json package-lock.json* .npmrc ./

# Install dependencies with JS-only approach
RUN npm install --production=false --legacy-peer-deps --omit=optional \
    && npm cache clean --force

# Copy source code
COPY . .

# Set build environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"
# Force Rollup to use JS-only version
ENV ROLLUP_SKIP_NATIVE=true

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install runtime dependencies only
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy built application
COPY --from=base /app/dist ./dist
COPY --from=base /app/package.json ./package.json

# Install only production dependencies
RUN npm install --only=production --ignore-scripts --omit=optional \
    && npm cache clean --force \
    && rm -rf /tmp/*

# Create non-root user
RUN addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nodejs

# Change ownership
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Set environment
ENV NODE_ENV=production
ENV PORT=10000

EXPOSE 10000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:10000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start application
CMD ["npm", "start"] 